<!-- Hero Section -->
<section class="hero text-center py-5 bg-light">
  <h1 class="display-5 fw-bold mb-3">Pr√©pa Examens</h1>
  <p class="lead text-muted mb-4">
    Trouvez et t√©l√©chargez facilement vos sujets d'examen par sp√©cialit√© et ann√©e.
  </p>
</section>

<!-- Filter Section -->
<section class="container my-4">
  <div class="row g-3 align-items-end">
    <div class="col-md-3">
      <label for="examSelect" class="form-label">Examen</label>
      <select id="examSelect" class="form-select">
        <option value="">-- S√©lectionnez un examen --</option>
        <% @exams.each do |exam| %>
          <option value="<%= exam.id %>"><%= exam.label %></option>
        <% end %>
      </select>
    </div>

    <div class="col-md-3">
      <label for="specialitySelect" class="form-label">Sp√©cialit√©</label>
      <select id="specialitySelect" class="form-select" disabled>
        <option value="">-- S√©lectionnez une sp√©cialit√© --</option>
      </select>
    </div>

    <div class="col-md-3">
      <label for="year" class="form-label">Ann√©e</label>
      <input type="number" id="year" class="form-control" placeholder="ex: 2023" min="2000" max="2100">
    </div>

    <div class="col-md-2">
      <button id="searchBtn" class="btn btn-primary w-100">Rechercher</button>
    </div>
  </div>
</section>

<!-- Subjects Section -->
<section class="subjects container my-4" id="subjectsList">
  <p class="text-center text-muted mt-5">Veuillez s√©lectionner un examen et une sp√©cialit√© pour voir les sujets.</p>
</section>

<!-- Script -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const examSelect = document.getElementById("examSelect");
        const specialitySelect = document.getElementById("specialitySelect");
        const yearInput = document.getElementById("year");
        const searchBtn = document.getElementById("searchBtn");
        const subjectsList = document.getElementById("subjectsList");

        // üîπ Load specialities dynamically when exam changes
        examSelect.addEventListener("change", async () => {
            const examId = examSelect.value;
            specialitySelect.innerHTML = '<option value="">-- Choisir une sp√©cialit√© --</option>';
            specialitySelect.disabled = true;

            if (!examId) return;

            try {
                const res = await fetch(`/api/specialities.json?exam_id=${examId}`);
                const data = await res.json();

                if (data.length) {
                    data.forEach(s => {
                        specialitySelect.innerHTML += `<option value="${s.id}">${s.label}</option>`;
                    });
                    specialitySelect.disabled = false;
                }
            } catch (err) {
                console.error("Erreur chargement sp√©cialit√©s:", err);
            }
        });

        // üîπ Fetch and render subjects (reusable function)
        async function fetchSubjects() {
            const examId = examSelect.value;
            const specialityId = specialitySelect.value;
            const year = yearInput.value;

            if (!examId || !specialityId) {
                alert("Veuillez choisir un examen et une sp√©cialit√©.");
                return;
            }

            const params = new URLSearchParams();
            if (examId) params.append("exam_id", examId);
            if (specialityId) params.append("speciality_id", specialityId);
            if (year) params.append("year", year);

            try {
                const res = await fetch(`/api/subjects.json?${params.toString()}`);
                const subjects = await res.json();

                if (!subjects.length) {
                    subjectsList.innerHTML = `<div class="alert alert-info mt-4 text-center">Aucun sujet trouv√©.</div>`;
                    return;
                }

                subjectsList.innerHTML = `
        <div class="row g-3 mt-4">
          ${subjects.map(s => `
            <div class="col-md-6 col-lg-4">
              <div class="card shadow-sm h-100">
                <div class="card-body">
                  <h5 class="card-title">${s.label}</h5>
                  <p class="card-text text-muted">${s.description || 'Aucune description.'}</p>
                  <p class="text-muted"><strong>Ann√©e:</strong> ${s.year || 'Non sp√©cifi√©e'}</p>
                  ${s.file_url ?
                    `<a href="${s.file_url}" target="_blank" class="btn btn-outline-secondary btn-sm">Voir PDF</a>
                     <a href="${s.file_url}" download class="btn btn-primary btn-sm ms-2">T√©l√©charger</a>` :
                    `<span class="text-muted">Aucun fichier disponible</span>`}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
            } catch (err) {
                console.error("Erreur recherche:", err);
                alert("Une erreur est survenue.");
            }
        }

        // üîπ Trigger search when button is clicked
        searchBtn.addEventListener("click", fetchSubjects);

        // üîπ Also re-fetch when year changes (optional UX improvement)
        yearInput.addEventListener("change", fetchSubjects);
    });
</script>
